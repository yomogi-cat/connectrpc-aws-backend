{
  "compilerOptions": {
    /* https://aka.ms/tsconfig でこのファイルの詳細を確認できます */

    /* プロジェクト設定 */
    // "incremental": true,                              /* プロジェクトのインクリメンタルコンパイルを可能にするために.tsbuildinfoファイルを保存します。 */
    // "composite": true,                                /* プロジェクト参照でTypeScriptプロジェクトを使用できるようにする制約を有効にします。 */
    // "tsBuildInfoFile": "./.tsbuildinfo",              /* .tsbuildinfoインクリメンタルコンパイルファイルのパスを指定します。 */
    // "disableSourceOfProjectReferenceRedirect": true,  /* 複合プロジェクトを参照する際に、宣言ファイルの代わりにソースファイルを優先することを無効にします。 */
    // "disableSolutionSearching": true,                 /* 編集時にマルチプロジェクト参照チェックからプロジェクトを除外します。 */
    // "disableReferencedProjectLoad": true,             /* TypeScriptによって自動的に読み込まれるプロジェクトの数を減らします。 */

    /* 言語と環境 */
    "target": "ES2024" /* 出力されるJavaScriptの言語バージョンを設定し、互換性のあるライブラリ宣言を含めます。 */,
    // "lib": [],                                        /* ターゲットランタイム環境を記述するバンドルされたライブラリ宣言ファイルのセットを指定します。 */
    // "jsx": "preserve",                                /* 生成されるJSXコードを指定します。 */
    // "libReplacement": true,                           /* ライブラリの置き換えを有効にします。 */
    // "experimentalDecorators": true,                   /* レガシーな実験的デコレータのサポートを有効にします。 */
    // "emitDecoratorMetadata": true,                    /* ソースファイル内のデコレートされた宣言に対して設計タイプのメタデータを出力します。 */
    // "jsxFactory": "",                                 /* React JSX出力をターゲットとする際に使用するJSXファクトリ関数を指定します。例：'React.createElement'または'h' */
    // "jsxFragmentFactory": "",                         /* React JSX出力をターゲットとする際にフラグメントに使用するJSX Fragment参照を指定します。例：'React.Fragment'または'Fragment' */
    // "jsxImportSource": "",                            /* 'jsx: react-jsx*'を使用する際にJSXファクトリ関数をインポートするために使用するモジュール指定子を指定します。 */
    // "reactNamespace": "",                             /* 'createElement'のために呼び出されるオブジェクトを指定します。これは'react' JSX出力をターゲットとする場合にのみ適用されます。 */
    // "noLib": true,                                    /* デフォルトのlib.d.tsを含むすべてのライブラリファイルのインクルードを無効にします。 */
    // "useDefineForClassFields": true,                  /* ECMAScript標準に準拠したクラスフィールドを出力します。 */
    // "moduleDetection": "auto",                        /* モジュール形式のJSファイルを検出するために使用されるメソッドを制御します。 */

    /* モジュール */
    "module": "NodeNext" /* 生成されるモジュールコードを指定します。 */,
    // "rootDir": "./",                                  /* ソースファイル内のルートフォルダを指定します。 */
    "moduleResolution": "NodeNext" /* TypeScriptが与えられたモジュール指定子からファイルを検索する方法を指定します。 */,
    "baseUrl": "./" /* 相対的でないモジュール名を解決するためのベースディレクトリを指定します。 */,
    "paths": { "@/*": ["./src/*"] } /* インポートを追加の検索場所に再マッピングするエントリのセットを指定します。 */,
    // "rootDirs": [],                                   /* モジュールを解決する際に複数のフォルダを1つとして扱うことを許可します。 */
    // "typeRoots": [],                                  /* './node_modules/@types'のように動作する複数のフォルダを指定します。 */
    // "types": [],                                      /* ソースファイルで参照されていなくても含める型パッケージ名を指定します。 */
    // "allowUmdGlobalAccess": true,                     /* モジュールからUMDグローバルにアクセスすることを許可します。 */
    // "moduleSuffixes": [],                             /* モジュールを解決する際に検索するファイル名のサフィックスのリスト。 */
    // "allowImportingTsExtensions": true,               /* インポートにTypeScriptファイル拡張子を含めることを許可します。'--moduleResolution bundler'と'--noEmit'または'--emitDeclarationOnly'のいずれかが設定されている必要があります。 */
    // "rewriteRelativeImportExtensions": true,          /* 相対インポートパス内の'.ts'、'.tsx'、'.mts'、'.cts'ファイル拡張子を、出力ファイル内のJavaScript相当のものに書き換えます。 */
    // "resolvePackageJsonExports": true,                /* パッケージインポートを解決する際にpackage.jsonの'exports'フィールドを使用します。 */
    // "resolvePackageJsonImports": true,                /* インポートを解決する際にpackage.jsonの'imports'フィールドを使用します。 */
    // "customConditions": [],                           /* インポートを解決する際に、リゾルバー固有のデフォルトに加えて設定する条件。 */
    // "noUncheckedSideEffectImports": true,             /* 副作用のあるインポートをチェックします。 */
    // "resolveJsonModule": true,                        /* .jsonファイルのインポートを有効にします。 */
    // "allowArbitraryExtensions": true,                 /* 宣言ファイルが存在する場合、任意の拡張子を持つファイルのインポートを有効にします。 */
    // "noResolve": true,                                /* 'import'、'require'、または'<reference>'がTypeScriptがプロジェクトに追加すべきファイルの数を拡張することを禁止します。 */

    /* JavaScriptサポート */
    // "allowJs": true,                                  /* JavaScriptファイルをプログラムの一部として許可します。'checkJS'オプションを使用してこれらのファイルからエラーを取得します。 */
    // "checkJs": true,                                  /* 型チェックされたJavaScriptファイルでエラー報告を有効にします。 */
    // "maxNodeModuleJsDepth": 1,                        /* 'node_modules'からのJavaScriptファイルをチェックするために使用される最大フォルダ深度を指定します。'allowJs'と共に使用する場合のみ適用されます。 */

    /* 出力 */
    // "declaration": true,                              /* プロジェクト内のTypeScriptファイルとJavaScriptファイルから.d.tsファイルを生成します。 */
    // "declarationMap": true,                           /* d.tsファイルのソースマップを作成します。 */
    // "emitDeclarationOnly": true,                      /* d.tsファイルのみを出力し、JavaScriptファイルは出力しません。 */
    // "sourceMap": true,                                /* 出力されたJavaScriptファイルのソースマップファイルを作成します。 */
    // "inlineSourceMap": true,                          /* 出力されたJavaScript内にソースマップファイルを含めます。 */
    // "noEmit": true,                                   /* コンパイルからのファイル出力を無効にします。 */
    // "outFile": "./",                                  /* すべての出力を1つのJavaScriptファイルにバンドルするファイルを指定します。'declaration'がtrueの場合、すべての.d.ts出力をバンドルするファイルも指定します。 */
    "outDir": "./dist" /* すべての出力ファイルの出力フォルダを指定します。 */,
    // "removeComments": true,                           /* コメントの出力を無効にします。 */
    // "importHelpers": true,                            /* プロジェクトごとに1回tslibからヘルパー関数をインポートすることを許可し、ファイルごとにそれらを含めることを避けます。 */
    // "downlevelIteration": true,                       /* 反復処理のために、より準拠した、しかし冗長でパフォーマンスの低いJavaScriptを出力します。 */
    // "sourceRoot": "",                                 /* デバッガーが参照ソースコードを見つけるためのルートパスを指定します。 */
    // "mapRoot": "",                                    /* デバッガーが生成された場所の代わりにマップファイルを配置する場所を指定します。 */
    // "inlineSources": true,                            /* 出力されたJavaScript内のソースマップ内にソースコードを含めます。 */
    // "emitBOM": true,                                  /* 出力ファイルの先頭にUTF-8バイトオーダーマーク（BOM）を出力します。 */
    // "newLine": "crlf",                                /* 出力ファイルの改行文字を設定します。 */
    // "stripInternal": true,                            /* JSDocコメントに'@internal'がある宣言の出力を無効にします。 */
    // "noEmitHelpers": true,                            /* コンパイルされた出力で'__extends'のようなカスタムヘルパー関数の生成を無効にします。 */
    // "noEmitOnError": true,                            /* 型チェックエラーが報告された場合、ファイルの出力を無効にします。 */
    // "preserveConstEnums": true,                       /* 生成されたコードで'const enum'宣言の消去を無効にします。 */
    // "declarationDir": "./",                           /* 生成された宣言ファイルの出力ディレクトリを指定します。 */

    /* 相互運用性の制約 */
    // "isolatedModules": true,                          /* 各ファイルが他のインポートに依存せずに安全にトランスパイルできることを保証します。 */
    // "verbatimModuleSyntax": true,                     /* type-onlyとしてマークされていないインポートやエクスポートを変換または削除せず、'module'設定に基づいて出力ファイルの形式で書き込まれることを保証します。 */
    // "isolatedDeclarations": true,                     /* 他のツールが簡単に宣言ファイルを生成できるように、エクスポートに十分なアノテーションを要求します。 */
    // "erasableSyntaxOnly": true,                       /* ECMAScriptの一部ではないランタイム構築を許可しません。 */
    // "allowSyntheticDefaultImports": true,             /* モジュールにデフォルトエクスポートがない場合に'import x from y'を許可します。 */
    "esModuleInterop": true /* CommonJSモジュールのインポートをサポートするための追加のJavaScriptを出力します。これにより、型の互換性のために'allowSyntheticDefaultImports'が有効になります。 */,
    // "preserveSymlinks": true,                         /* シンボリックリンクをその実パスに解決することを無効にします。これはnodeの同じフラグに対応します。 */
    "forceConsistentCasingInFileNames": true /* インポートで大文字小文字が正しいことを保証します。 */,

    /* 型チェック */
    "strict": true /* すべての厳格な型チェックオプションを有効にします。 */,
    // "noImplicitAny": true,                            /* 暗黙の'any'型を持つ式と宣言に対してエラー報告を有効にします。 */
    // "strictNullChecks": true,                         /* 型チェック時に'null'と'undefined'を考慮に入れます。 */
    // "strictFunctionTypes": true,                      /* 関数を割り当てる際に、パラメータと戻り値がサブタイプ互換であることを確認します。 */
    // "strictBindCallApply": true,                      /* 'bind'、'call'、'apply'メソッドの引数が元の関数と一致することを確認します。 */
    // "strictPropertyInitialization": true,             /* コンストラクタで設定されていないが宣言されているクラスプロパティをチェックします。 */
    // "strictBuiltinIteratorReturn": true,              /* 組み込みイテレータは'TReturn'型が'any'の代わりに'undefined'でインスタンス化されます。 */
    // "noImplicitThis": true,                           /* 'this'に'any'型が与えられた場合にエラー報告を有効にします。 */
    // "useUnknownInCatchVariables": true,               /* デフォルトのcatch句変数を'any'の代わりに'unknown'として扱います。 */
    // "alwaysStrict": true,                             /* 'use strict'が常に出力されることを保証します。 */
    // "noUnusedLocals": true,                           /* ローカル変数が読み取られていない場合にエラー報告を有効にします。 */
    // "noUnusedParameters": true,                       /* 関数パラメータが読み取られていない場合にエラーを発生させます。 */
    // "exactOptionalPropertyTypes": true,               /* オプショナルプロパティ型を'undefined'を追加するのではなく、記述された通りに解釈します。 */
    // "noImplicitReturns": true,                        /* 関数で明示的に戻り値が指定されていないコードパスに対してエラー報告を有効にします。 */
    // "noFallthroughCasesInSwitch": true,               /* switch文のフォールスルーケースに対してエラー報告を有効にします。 */
    // "noUncheckedIndexedAccess": true,                 /* インデックスを使用してアクセスする際に型に'undefined'を追加します。 */
    // "noImplicitOverride": true,                       /* 派生クラスでオーバーライドされるメンバーがoverride修飾子でマークされていることを保証します。 */
    // "noPropertyAccessFromIndexSignature": true,       /* インデックス型を使用して宣言されたキーに対して、インデックスアクセサの使用を強制します。 */
    // "allowUnusedLabels": true,                        /* 未使用のラベルに対するエラー報告を無効にします。 */
    // "allowUnreachableCode": true,                     /* 到達不能なコードに対するエラー報告を無効にします。 */

    /* 完全性 */
    // "skipDefaultLibCheck": true,                      /* TypeScriptに含まれる.d.tsファイルの型チェックをスキップします。 */
    "skipLibCheck": true /* すべての.d.tsファイルの型チェックをスキップします。 */
  },
  "include": ["src/**/*"]
}
